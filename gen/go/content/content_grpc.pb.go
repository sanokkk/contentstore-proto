// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: content/content.proto

package proto_content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentStorage_DownloadContent_FullMethodName = "/content.ContentStorage/DownloadContent"
	ContentStorage_UploadContent_FullMethodName   = "/content.ContentStorage/UploadContent"
)

// ContentStorageClient is the client API for ContentStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentStorageClient interface {
	DownloadContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*GetContentResponse, error)
	UploadContent(ctx context.Context, in *UploadContentRequest, opts ...grpc.CallOption) (*UploadContentResponse, error)
}

type contentStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewContentStorageClient(cc grpc.ClientConnInterface) ContentStorageClient {
	return &contentStorageClient{cc}
}

func (c *contentStorageClient) DownloadContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*GetContentResponse, error) {
	out := new(GetContentResponse)
	err := c.cc.Invoke(ctx, ContentStorage_DownloadContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentStorageClient) UploadContent(ctx context.Context, in *UploadContentRequest, opts ...grpc.CallOption) (*UploadContentResponse, error) {
	out := new(UploadContentResponse)
	err := c.cc.Invoke(ctx, ContentStorage_UploadContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentStorageServer is the server API for ContentStorage service.
// All implementations must embed UnimplementedContentStorageServer
// for forward compatibility
type ContentStorageServer interface {
	DownloadContent(context.Context, *GetContentRequest) (*GetContentResponse, error)
	UploadContent(context.Context, *UploadContentRequest) (*UploadContentResponse, error)
	mustEmbedUnimplementedContentStorageServer()
}

// UnimplementedContentStorageServer must be embedded to have forward compatible implementations.
type UnimplementedContentStorageServer struct {
}

func (UnimplementedContentStorageServer) DownloadContent(context.Context, *GetContentRequest) (*GetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadContent not implemented")
}
func (UnimplementedContentStorageServer) UploadContent(context.Context, *UploadContentRequest) (*UploadContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadContent not implemented")
}
func (UnimplementedContentStorageServer) mustEmbedUnimplementedContentStorageServer() {}

// UnsafeContentStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentStorageServer will
// result in compilation errors.
type UnsafeContentStorageServer interface {
	mustEmbedUnimplementedContentStorageServer()
}

func RegisterContentStorageServer(s grpc.ServiceRegistrar, srv ContentStorageServer) {
	s.RegisterService(&ContentStorage_ServiceDesc, srv)
}

func _ContentStorage_DownloadContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentStorageServer).DownloadContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentStorage_DownloadContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentStorageServer).DownloadContent(ctx, req.(*GetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentStorage_UploadContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentStorageServer).UploadContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentStorage_UploadContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentStorageServer).UploadContent(ctx, req.(*UploadContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentStorage_ServiceDesc is the grpc.ServiceDesc for ContentStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.ContentStorage",
	HandlerType: (*ContentStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadContent",
			Handler:    _ContentStorage_DownloadContent_Handler,
		},
		{
			MethodName: "UploadContent",
			Handler:    _ContentStorage_UploadContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/content.proto",
}
